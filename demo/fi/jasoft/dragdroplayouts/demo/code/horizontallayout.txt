// Create a horizontal layout
final DDHorizontalLayout layout = new DDHorizontalLayout();
layout.setCaption("Horizontal layout");

// Divide the drop zones in three equal parts (left-middle-right)
layout.setComponentHorizontalDropRatio(0.3f);

// Enable dragging
layout.setDragMode(LayoutDragMode.CLONE);

// Enable dropping
layout.setDropHandler(new DropHandler() {

    public AcceptCriterion getAcceptCriterion() {
    	// Only allow drops between components
        return new Not(HorizontalLocationIs.CENTER);
    }

    public void drop(DragAndDropEvent event) {
    	// Get the transferable (We now the component comes from a layout so we can cast 
        // it without checking)      
        LayoutBoundTransferable transferable = (LayoutBoundTransferable) event
                .getTransferable();

		// Get Horizontal layout specific target details
        HorizontalLayoutTargetDetails details = (HorizontalLayoutTargetDetails) event
                .getTargetDetails();

		// Get the dragged component
        Component comp = transferable.getComponent();

		// Get the old and new indexes of the component
        int currentIndex = layout.getComponentIndex(comp);
        int newIndex = details.getOverIndex();

		// Drop the component
        layout.removeComponent(comp);
        if (currentIndex > newIndex
                && details.getDropLocation() == HorizontalDropLocation.RIGHT) {
            newIndex++;
        }
        layout.addComponent(comp, newIndex);
    }
});

// Add some components to the layout
layout.addComponent(new Label(
        "These components are stacked horizontally, try reordering them"));
Button btn = new Button("Button 1");
btn.setWidth("100px");
layout.addComponent(btn);
btn = new Button("Button 2");
btn.setWidth("150px");
layout.addComponent(btn);
btn = new Button("Button 3");
btn.setWidth("200px");
layout.addComponent(btn);