// Create a vertical layout
final DDVerticalLayout layout = new DDVerticalLayout();
layout.setCaption("Vertical layout");

// Divide the drop zone in three equal parst (top-middle-bottom)
layout.setComponentVerticalDropRatio(0.3f);

// Enable dragging
layout.setDragMode(LayoutDragMode.CLONE);

// Enable dropping
layout.setDropHandler(new DropHandler() {

    public AcceptCriterion getAcceptCriterion() {
    	// Only allow drops between components
        return new Not(VerticalLocationIs.MIDDLE);
    }

    public void drop(DragAndDropEvent event) {
    	// Get the transferable (We now the component comes from a layout so we can cast 
        // it without checking)        
        LayoutBoundTransferable transferable = (LayoutBoundTransferable) event
                .getTransferable();
		
		// Get vertical layout specific details
        VerticalLayoutTargetDetails details = (VerticalLayoutTargetDetails) event
                .getTargetDetails();

		// Get the dragged component
        Component comp = transferable.getComponent();

		// Get the old and new indexes
        int currentIndex = layout.getComponentIndex(comp);
        int newIndex = details.getOverIndex();

		// Drop component
        layout.removeComponent(comp);
        if (currentIndex > newIndex
                && details.getDropLocation() == VerticalDropLocation.BOTTOM) {
            newIndex++;
        }
        layout.addComponent(comp, newIndex);
    }
});

// Add some components to the layout
layout.addComponent(new Label(
        "These components are stacked vertically, try reordering them"));
Button btn = new Button("Button 1");
btn.setWidth("100px");
layout.addComponent(btn);
btn = new Button("Button 2");
btn.setWidth("150px");
layout.addComponent(btn);
btn = new Button("Button 3");
btn.setWidth("200px");
layout.addComponent(btn);